@rendermode InteractiveAuto
@inject BankApiGraphqlClient _client
@inject NavigationManager _navigationManager


<MudContainer Class="d-flex flex-column pt-4">
	<MudContainer Class="d-flex flex-column pt-2">
		<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
			<MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!" @ref="emailField"
						  Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
			<MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
						  InputType="InputType.Password"
						  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
						  RequiredError="Password is required!" />
			<MudTextField T="string"
						  Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
						  Validation="@(new Func<string, string>(PasswordMatch))" />
			<MudContainer class="d-flex align-center justify-space-between">
				<MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!" />
				<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="CreateAccount">Register</MudButton>
			</MudContainer>
		</MudForm>
	</MudContainer>
	<MudContainer>
		@if (signUpResult != null && !signUpResult.Success)
		{
			<MudAlert Severity="Severity.Error" Variant="Variant.Outlined">@signUpResult.Messages[0]</MudAlert>
		}
	</MudContainer>

</MudContainer>

@code {
	bool success;
	string[] errors = { };
	MudTextField<string> pwField1 = new();
	MudTextField<string> emailField = new();
	MudForm form = null!;
	ICreateUserAccount_CreateAccount? signUpResult { get; set; }

	private IEnumerable<string> PasswordStrength(string pw)
	{
		if (string.IsNullOrWhiteSpace(pw))
		{
			yield return "Password is required!";
			yield break;
		}
		if (pw.Length < 8)
			yield return "Password must be at least of length 8";
		if (!Regex.IsMatch(pw, @"[A-Z]"))
			yield return "Password must contain at least one capital letter";
		if (!Regex.IsMatch(pw, @"[a-z]"))
			yield return "Password must contain at least one lowercase letter";
		if (!Regex.IsMatch(pw, @"[0-9]"))
			yield return "Password must contain at least one digit";
	}

	private string PasswordMatch(string arg)
	{
		if (pwField1.Value != arg)
			return "Passwords don't match";
		return "";
	}

	async Task CreateAccount()
	{
		if (emailField.Value != null && pwField1.Value != null)
		{
			var result = await _client.CreateUserAccount.ExecuteAsync(new CreateUserAccountInput
			{
				Password = pwField1.Value,
				UserName = emailField.Value
			});
			if(result != null){
				result.EnsureNoErrors();
				signUpResult = result?.Data?.CreateAccount;
				if(signUpResult != null && signUpResult.Success)
				{
					_navigationManager.NavigateTo("/");
				}
			}
		}
	}
}
